var CompositeDisposable = require('atom').CompositeDisposable;

module.exports = {
	subscriptions: new CompositeDisposable(),
	// make this filed as config later
	fillTab: false,
	activate: function() {
		return this.subscriptions.add(atom.commands.add('atom-workspace', 'jade-beautify:convert', this.convert));
	},
	deactivate: function() {
		this.subscriptions.dispose();
	},
	convert: function() {
		var editor = atom.workspace.getActiveTextEditor();
		// Base tabSize = 2, is more readable.
		var tabSize = editor.getTabLength();
		var indentList = [];

		var prevIndent = 0;
		var lines = editor.getText().split('\n');

		lines.forEach(function(line, n) {
			// it return matching space --> data[0], data[index] = 0, remained input --> data.input
			var data = line.match(/^\s*/);

			// when tab and space mixed, it replace all tab to spaces.
			var space = data[0].replace(/\t/g, Array(tabSize + 1).join(' '));
			var inputAfterRemoveSpace = data.input.replace(/^\s*/, '');
			var indent = (inputAfterRemoveSpace.length === 0) ? 0 : space.length;

			var newindent = 0;
			var type = (inputAfterRemoveSpace.match(/^\/\/|^\/\*|^\*/)) ? 'remark' : 'code';

			if (indent === 0) {
				newindent = 0;
			} else {
				// 현재 라인이 remark이고 앞 라인이 remark인 경우는 앞 라인 indent를 따른다.
				if (indentList.length > 0 && type === 'remark' && indentList[indentList.length - 1].type == 'remark') {
					newindent = indentList[indentList.length - 1].newindent;
				} else {
					if (indent === prevIndent) {
						for (i = indentList.length - 1; i >= 0; i--) {
							if (indentList[i].input !== '') {
								newindent = indentList[i].newindent;
								break;
							}
						}
					} else if (indent > prevIndent) {
						for (i = indentList.length - 1; i >= 0; i--) {
							if (indentList[i].input !== '') {
								newindent = indentList[i].newindent + 1;
								break;
							}
						}
					} else {
						for (i = indentList.length - 1; i >= 0; i--) {
							if (indent == indentList[i].indent) {
								newindent = indentList[i].newindent;
								break;
							}
						}
					}
				}
			}
			console.log(n + 1, indent, newindent, prevIndent);

			indentList.push({
				type: type,
				indent: indent,
				newindent: newindent,
				input: inputAfterRemoveSpace,
			});

			if (inputAfterRemoveSpace.length !== 0) { // null 라인은 무시한다.
				prevIndent = indent;
			}
		});

		// // Here,it reformat as it's order
		var formatedLine = indentList.map(function(line) {
			var space = Array(line.newindent + 1).join('\t');
			if (!this.fillTab) space = space.replace(/\t/g, Array(tabSize + 1).join(' '));

			console.log(line.type, line.indent, line.newindent, space + line.input);
			return space + line.input;
		});

		//Reset data
		editor.setText(formatedLine.join('\n'));

	}
};
